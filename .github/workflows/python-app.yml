# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Procsim tests

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pycodestyle
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with pycodestyle
      run: |
        pycodestyle . --max-line-length=150

    - name: Test with pytest
      run: |
        pytest

    - name: Test Biomass
      run: |
        pip install -e .
        test/biomass/test_no_pvml.sh

    - name: Test FLEX
      run: |
        pip install -e .
        pip install tabulate
        cd examples_flex
        ./generate_aux.sh
        ./run_all_test_scenario.sh --no-wait
        ./run_cal_test_scenario.sh
        ./all_disp.sh
        ./run_l1c_l2_test_scenario.sh

    - name: Build
      id: pack_tarball
      run: |
        ./build.sh
        PACK_NAME=$(ls *.tgz | head -n 1)
        echo "tar_filename=$PACK_NAME" >> $GITHUB_OUTPUT

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.pack_tarball.outputs.tar_filename }}
        asset_name: ${{ steps.pack_tarball.outputs.tar_filename }}
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
